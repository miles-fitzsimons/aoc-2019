<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="9ebc0217-3c84-4b9e-90f6-dda5a9555b09" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/aoc_2019/day_3.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/aoc_2019/day_3.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Test Namespace" />
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1UPk67o5yc8Xc3YVGtgQ1uLkEjR" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="PropertiesComponent">
    <property name="GoToNamespace.includeLibraries" value="false" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="cursive.last.file.extension./home/miles/dev/aoc-2019/resources" value="clj" />
    <property name="cursive.last.file.extension./home/miles/dev/aoc-2019/src" value="clj" />
    <property name="cursive.last.file.extension./home/miles/dev/aoc-2019/test" value="clj" />
    <property name="last_opened_file_path" value="$USER_HOME$/exercism/clojure/rna-transcription" />
  </component>
  <component name="ReplState" timestamp="1575795822032">{:repl-history {:ide [], :local [{:command &quot;(-&gt;int \\a)&quot;, :offset 9, :ns &quot;aoc-2019.core&quot;} {:command &quot;(-&gt;int \\5)&quot;, :offset 9, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn increase?\n  [s]\n  (loop [s s\n         curr (first s)\n         prev 0]\n    (if (= curr prev)\n      true\n      curr)))&quot;, :offset 119, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn increase?\n  [s]\n  (loop [s s\n         curr (-&gt;int (first s))\n         prev 0]\n    (if (= curr prev)\n      true\n      curr)))&quot;, :offset 56, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;33\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn increase?\n  [s]\n  (loop [s s\n         curr (-&gt;int (first s))\n         prev 0]\n    (if (&gt; prev curr)\n      true\n      curr)))&quot;, :offset 104, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;00\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn increase?\n  [s]\n  (loop [s s\n         curr (-&gt;int (first s))\n         prev 0]\n    (if (&gt; curr prev)\n      true\n      curr)))&quot;, :offset 104, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;02\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn increase?\n  [s]\n  (loop [s s\n         curr (-&gt;int (first s))\n         prev 0]\n    (if (&gt; prev curr)\n      true\n      \&quot;NOPE\&quot;)))&quot;, :offset 104, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;98\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;89\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;05\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;58\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;38\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn increase?\n  [s]\n  (loop [s s\n         curr (-&gt;int (first s))\n         prev 0]\n    (if (&gt; curr prev)\n      true\n      \&quot;NOPE\&quot;)))&quot;, :offset 100, :ns &quot;aoc-2019.core&quot;} {:command &quot;(increase? \&quot;83\&quot;)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;\n(defn adjacent-digits?\n  [s]\n  (some? (re-find #\&quot;(\\d)\\1+\&quot; s)))\n\n\n(defn adjacent-digits?\n  [n]\n  (some? (re-find #\&quot;(\\d)\\1+\&quot; (str n))))\n\n(defn increasing?\n  [n]\n  (= (str n) (clojure.string/join (sort (str n)))))\n\n(defn is-password?\n  [n]\n  (and (increasing? n) (adjacent-digits? n)))\n\n(defn count-passwords\n  [start end]\n  (count (filter #(is-password? %) (range start (inc end)))))\n&quot;, :offset 0, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn only-two-adjacent-digits?\n  [n]\n  ())&quot;, :offset 41, :ns &quot;aoc-2019.core&quot;} {:command &quot;(partition-by identity \&quot;122234566\&quot;)&quot;, :offset 33, :ns &quot;aoc-2019.core&quot;} {:command &quot;(some (partition-by identity \&quot;122234566\&quot;))&quot;, :offset 6, :ns &quot;aoc-2019.core&quot;} {:command &quot;(some '(3 4 5 ))&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(some #(= % 3) '(3 4 5 ))&quot;, :offset 13, :ns &quot;aoc-2019.core&quot;} {:command &quot;(some #(= % 2) '(3 4 5 ))&quot;, :offset 13, :ns &quot;aoc-2019.core&quot;} {:command &quot;(if nil :f :a)&quot;, :offset 13, :ns &quot;aoc-2019.core&quot;} {:command &quot;(some #(= 2 (count %)) (partition-by identity \&quot;122234566\&quot;))&quot;, :offset 59, :ns &quot;aoc-2019.core&quot;} {:command &quot;()&quot;, :offset 1} {:command &quot;(some #(= (count %) 2) (partition-by identity \&quot;122234566\&quot;))&quot;, :offset 21, :ns &quot;aoc-2019.core&quot;} {:command &quot;3&quot;, :offset 1, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn only-two-adjacent-digits?\n  [n]\n  (some #(= (count %) 2) (partition-by identity (str n))))&quot;, :offset 61, :ns &quot;aoc-2019.core&quot;} {:command &quot;(only-two-adjacent-digits? 1122)&quot;, :offset 31, :ns &quot;aoc-2019.core&quot;} {:command &quot;(only-two-adjacent-digits? 11223333)&quot;, :offset 35, :ns &quot;aoc-2019.core&quot;} {:command &quot;(only-two-adjacent-digits? 1111223333)&quot;, :offset 31, :ns &quot;aoc-2019.core&quot;} {:command &quot;(only-two-adjacent-digits? 11112223333)&quot;, :offset 33, :ns &quot;aoc-2019.core&quot;} {:command &quot;(only-two-adjacent-digits? 4453)&quot;, :offset 31, :ns &quot;aoc-2019.core&quot;} {:command &quot;(count-passwords 236491 713787)&quot;, :offset 24, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn computer\n  [input]\n  (loop [input input\n         n 0]\n    (if (= 99 (input n))\n      input\n      (let [index-a (input (+ n 1)) a (input index-a)\n            index-b (input (+ n 2)) b (input index-b)\n            index-c (input (+ n 3))]\n        (case (input n)\n          1 (recur (assoc input index-c (+ a b)) (+ n 4))\n          2 (recur (assoc input index-c (* a b)) (+ n 4)))))))\n&quot;, :offset 387, :ns &quot;aoc-2019.core&quot;} {:command &quot;(computer [99 ])&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(computer 45)&quot;, :offset 12, :ns &quot;aoc-2019.core&quot;} {:command &quot;(computer [1 9 10 3 2 3 11 0 99 30 40 50])&quot;, :offset 41, :ns &quot;aoc-2019.core&quot;} {:command &quot;9&quot;, :offset 1, :ns &quot;aoc-2019.core&quot;} {:command &quot;(require '[aoc-2019.day-3 :as d3])&quot;, :offset 32, :ns &quot;aoc-2019.core&quot;} {:command &quot;d3/xx&quot;, :offset 5, :ns &quot;aoc-2019.core&quot;} {:command &quot;d3/path-3&quot;, :offset 9, :ns &quot;aoc-2019.core&quot;} {:command &quot;(for [[coordinates freq] (frequencies d3/path-3)\n      :when (&gt; freq 1)]\n  coordinates)&quot;, :offset 47, :ns &quot;aoc-2019.core&quot;} {:command &quot;(for [[coordinates freq] (frequencies (d3/get-path-coordinates d3/path-3))\n      :when (&gt; freq 1)]\n  coordinates)&quot;, :offset 72, :ns &quot;aoc-2019.core&quot;} {:command &quot;(set ('(0 1) '(0 2)))&quot;, :offset 18, :ns &quot;aoc-2019.core&quot;} {:command &quot;(set [3 4 5 6 3])&quot;, :offset 15, :ns &quot;aoc-2019.core&quot;} {:command &quot;(distinct (d3/get-path-coordinates d3/path-3))&quot;, :offset 9, :ns &quot;aoc-2019.core&quot;} {:command &quot;(count (d3/get-path-coordinates d3/path-3))&quot;, :offset 7, :ns &quot;aoc-2019.core&quot;} {:command &quot;(count (distinct (d3/get-path-coordinates d3/path-3)))&quot;, :offset 7, :ns &quot;aoc-2019.core&quot;} {:command &quot;(d3/get-min-distance d3/path-3 d3/path-4)&quot;, :offset 40, :ns &quot;aoc-2019.core&quot;} {:command &quot;(d3/get-min-distance d3/path-5 d3/path-6)&quot;, :offset 40, :ns &quot;aoc-2019.core&quot;} {:command &quot;(for [x (d3/get-path-coordinates d3/path-3)]\n  x)&quot;, :offset 48, :ns &quot;aoc-2019.core&quot;} {:command &quot;(for [x (d3/get-path-coordinates d3/path-3)]\n  (vec (first x) (second x) 1))&quot;, :offset 74, :ns &quot;aoc-2019.core&quot;} {:command &quot;(for [x (d3/get-path-coordinates d3/path-3)]\n  (vector (first x) (second x) 1))&quot;, :offset 54, :ns &quot;aoc-2019.core&quot;} {:command &quot;(loop [x (d3/get-path-coordinates d3/path-3)]\n  (vector (first x) (second x) 1))&quot;, :offset 5, :ns &quot;aoc-2019.core&quot;} {:command &quot;(def input \n  (clojure.string/split\n    \n    \n    \&quot;COM)B\\nB)C\\nC)D\\nD)E\\nE)F\\nB)G\\nG)H\\nD)I\\nE)J\\nJ)K\\nK)L\&quot;\n    #\&quot;\\n\&quot; )\n  \n  )&quot;, :offset 116, :ns &quot;aoc-2019.core&quot;} {:command &quot;input&quot;, :offset 5, :ns &quot;aoc-2019.core&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;aoc-2019.core&quot;} {:command &quot;;; build links&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(clojure.string/split \&quot;B)D\&quot; #\&quot;)\&quot;)&quot;, :offset 31, :ns &quot;aoc-2019.core&quot;} {:command &quot;(clojure.string/split \&quot;B)D\&quot; #\&quot;\\)\&quot;)&quot;, :offset 31, :ns &quot;aoc-2019.core&quot;} {:command &quot;(loop [input input]\n  input)&quot;, :offset 27, :ns &quot;aoc-2019.core&quot;} {:command &quot;(into {}  (d3/get-path-coordinates d3/path-3))&quot;, :offset 9, :ns &quot;aoc-2019.core&quot;} {:command &quot;(into {} 4)&quot;, :offset 10, :ns &quot;aoc-2019.core&quot;} {:command &quot;(into {} 4 5)&quot;, :offset 12, :ns &quot;aoc-2019.core&quot;} {:command &quot;(into {} [4 5])&quot;, :offset 10, :ns &quot;aoc-2019.core&quot;} {:command &quot;(into {} '( (0 1) (0 2)) )&quot;, :offset 22, :ns &quot;aoc-2019.core&quot;} {:command &quot;(d3/get-path-coordinates d3/path-3)&quot;, :offset 34, :ns &quot;aoc-2019.core&quot;} {:command &quot;(d3/get-path-coordinates d3/path-1)&quot;, :offset 34, :ns &quot;aoc-2019.core&quot;} {:command &quot;(def xx (d3/get-path-coordinates d3/path-1))&quot;, :offset 42, :ns &quot;aoc-2019.core&quot;} {:command &quot;(interleave xx (range (count xx)))&quot;, :offset 31, :ns &quot;aoc-2019.core&quot;} {:command &quot;(apply hash-map '((01)))&quot;, :offset 21, :ns &quot;aoc-2019.core&quot;} {:command &quot;(apply hash-map '(0 (01)))&quot;, :offset 19, :ns &quot;aoc-2019.core&quot;} {:command &quot;(apply hash-map '(0 (0 1)))&quot;, :offset 23, :ns &quot;aoc-2019.core&quot;} {:command &quot;xx&quot;, :offset 2, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range (count xx)) xx)&quot;, :offset 29, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range 1 (count (inc xx))) xx)&quot;, :offset 31, :ns &quot;aoc-2019.core&quot;} {:command &quot;(range 1 4)&quot;, :offset 10, :ns &quot;aoc-2019.core&quot;} {:command &quot;(range  4)&quot;, :offset 7, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range  (count (inc xx))) xx)&quot;, :offset 15, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range 1 (count xx)) xx)&quot;, :offset 16, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range  (count xx)) xx)&quot;, :offset 15, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range  ) xx)&quot;, :offset 16, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range 1  ) xx)&quot;, :offset 16, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range ) xx)&quot;, :offset 14, :ns &quot;aoc-2019.core&quot;} {:command &quot;(count (zipmap (range ) xx))&quot;, :offset 7, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range count (xx) ) xx)&quot;, :offset 24, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range  ( count xx) ) xx)&quot;, :offset 24, :ns &quot;aoc-2019.core&quot;} {:command &quot;(count (zipmap (range  ( count xx) ) xx))&quot;, :offset 7, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range 1 (count xx) ) xx)&quot;, :offset 16, :ns &quot;aoc-2019.core&quot;} {:command &quot;(count (zipmap (range 1 (count xx) ) xx))&quot;, :offset 7, :ns &quot;aoc-2019.core&quot;} {:command &quot;(count (zipmap (range 1 (inc (count xx)) ) xx))&quot;, :offset 29, :ns &quot;aoc-2019.core&quot;} {:command &quot;(zipmap (range 1 (inc (count xx))) xx)&quot;, :offset 0, :ns &quot;aoc-2019.core&quot;} {:command &quot;(defn add-step-count\n  [track]\n  (zipmap (range 1 (inc (count track))) track))&quot;, :offset 76, :ns &quot;aoc-2019.core&quot;} {:command &quot;(add-step-count xx)&quot;, :offset 18, :ns &quot;aoc-2019.core&quot;} {:command &quot;(add-step-count (aoc-2019.day-3/path 4))&quot;, :offset 38, :ns &quot;aoc-2019.core&quot;} {:command &quot;(add-step-count (aoc-2019.day-3/path-4))&quot;, :offset 38, :ns &quot;aoc-2019.core&quot;} {:command &quot;(add-step-count (aoc-2019.day-3/get-path-coordinates aoc-2019.day-3/path-4))&quot;, :offset 74, :ns &quot;aoc-2019.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for aoc-2019" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="aoc-2019" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for aoc-2019" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="9ebc0217-3c84-4b9e-90f6-dda5a9555b09" name="Default Changelist" comment="" />
      <created>1575265439837</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1575265439837</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>